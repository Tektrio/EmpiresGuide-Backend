#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîÑ Verificando e corrigindo tipos do Express...');

// Verificar se @types/express existe
if (!fs.existsSync(path.join(process.cwd(), 'node_modules/@types/express'))) {
  console.log('‚ö†Ô∏è @types/express n√£o encontrado, instalando...');
  try {
    execSync('npm install --no-save @types/express', { stdio: 'inherit' });
    console.log('‚úÖ @types/express instalado com sucesso');
  } catch (error) {
    console.error('‚ùå Erro ao instalar @types/express:', error.message);
  }
}

// Criar arquivo tempor√°rio de refer√™ncia para o Express
const referenceFile = path.join(process.cwd(), 'src/types/express-fix.d.ts');

// Verificar se o diret√≥rio existe
const typesDir = path.join(process.cwd(), 'src/types');
if (!fs.existsSync(typesDir)) {
  fs.mkdirSync(typesDir, { recursive: true });
}

// Conte√∫do do arquivo de refer√™ncia
const referenceContent = `
// Refer√™ncia para os tipos do Express
/// <reference types="express" />

// Defini√ß√µes extras para Express
declare namespace Express {
  export interface Request {
    user?: any;
    body: any;
    params: any;
    query: any;
    path: string;
    headers: {
      authorization?: string;
      [key: string]: string | undefined;
    };
  }
}

// Importar o express explicitamente
declare module 'express' {
  export = e;
}
declare const e: any;
`;

// Escrever o arquivo
fs.writeFileSync(referenceFile, referenceContent);
console.log(`‚úÖ Arquivo de refer√™ncia criado em ${referenceFile}`);

console.log('‚úÖ Corre√ß√£o de tipos do Express conclu√≠da!'); 